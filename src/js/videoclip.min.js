/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/src/js/";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	var _videoclipInit = __webpack_require__(1);

	var _common = __webpack_require__(2);

	var _timeline = __webpack_require__(3);

	var _timeline2 = _interopRequireDefault(_timeline);

	var _previewVideo = __webpack_require__(4);

	var _previewVideo2 = _interopRequireDefault(_previewVideo);

	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

	var eControlBar = document.querySelector('.vjs-control-bar');
	var eCurrentTime = document.querySelector('.vjs-current-time');

	(0, _common.beforeElement)(eControlBar, '\n    <div class="vjs-editor-progress" id="J_vjs-editor-progress">\n        <div class="vjs-editor-timeplay" id="J_vjs-editor-timeplay">00:00</div>\n        <div class="vjs-editor-moveicon" id="J_vjs-editor-moveicon"></div>\n        <div class="vjs-progress-line" id="J_vjs-progress-line"><div class="vjs-progress-icon" id="J_vjs-progress-icon"><i></i></div></div>\n    </div>\n');

	(0, _common.beforeElement)(eCurrentTime, '\n    <div class="vjs-editor-curtime"><span id="J_vjs-editor-curtime">00:00</span>/<span id="J_vjs-editor-alltime">13:05</span></div>\n');

	var T = new _timeline2.default();
	var P = new _previewVideo2.default();

	document.getElementById('J_save').addEventListener('click', function () {
	    console.log(_videoclipInit.clipFragments);
	});

	document.getElementById('J_revoked').addEventListener('click', function () {
	    if (_videoclipInit.historyArr.length <= 1) {
	        alert('已经是最后一步了！');

	        return;
	    }

	    var obj = _common.vjsHistoryPart.getPart();

	    _videoclipInit.clipFragments.length = 0;
	    _videoclipInit.deleteFragments.length = 0;

	    Object.assign(_videoclipInit.clipFragments, obj.cg);
	    Object.assign(_videoclipInit.deleteFragments, obj.dg);

	    _videoclipInit.clipFragments.splice(0, 0);
	    _videoclipInit.deleteFragments.splice(0, 0);

	    _common.vjsHistoryPart.removePart();

	    (0, _common.saveHistory)();
	});

	document.getElementById('J_reload').addEventListener('click', function () {
	    if (_videoclipInit.historyArr.length <= 1) {
	        alert('已经是原始视频了！');

	        return;
	    }
	    var obj = _common.vjsHistoryPart.getFirstPart();

	    _videoclipInit.clipFragments.length = 0;
	    _videoclipInit.deleteFragments.length = 0;

	    Object.assign(_videoclipInit.clipFragments, obj.cg);
	    Object.assign(_videoclipInit.deleteFragments, obj.dg);

	    _videoclipInit.clipFragments.splice(0, 0);
	    _videoclipInit.deleteFragments.splice(0, 0);

	    _videoclipInit.historyArr.length = 0;
	    _videoclipInit.historyArr.push(obj);

	    (0, _common.saveHistory)();
	});

	_videoclipInit.videoPlay.on('timeupdate', function () {
	    var curTime = _videoclipInit.videoPlay.currentTime();

	    if (parseInt(curTime) - 1 > _videoclipInit.clipFragments[_videoclipInit.clipFragments.length - 1].et + _videoclipInit.clipFragments[_videoclipInit.clipFragments.length - 1].over) {
	        _videoclipInit.videoPlay.pause();

	        _videoclipInit.videoPlay.currentTime(_videoclipInit.clipFragments[0].st + _videoclipInit.clipFragments[0].over);
	        //let shallowTime = toShallowTime(clipFragments[clipFragments.length - 1].et + clipFragments[clipFragments.length - 1].over);

	        T.setLocalTime(0);
	        P.setProgressBar(0);

	        return;
	    }
	    if (acrossDeletePart(curTime)) return;

	    var shallowTime = toShallowTime(curTime);

	    T.setLocalTime(shallowTime);
	    P.setProgressBar(shallowTime);
	});

	function acrossDeletePart(ct) {
	    var _index = isInDeletepart(ct);

	    if (_index > -1) {
	        _videoclipInit.videoPlay.currentTime(_videoclipInit.deleteFragments[_index].et + 1);

	        return true;
	    }

	    return false;
	}

	function toShallowTime(ct) {
	    var _index = getIndex(ct);

	    return ct - _videoclipInit.clipFragments[_index].over;
	}

	function getIndex(curTime) {
	    var _index = 0;

	    for (var i = 0, l = _videoclipInit.clipFragments.length; i < l; i++) {
	        if (curTime < _videoclipInit.clipFragments[i].et + _videoclipInit.clipFragments[i].over) {
	            _index = i;
	            break;
	        }
	    }

	    return _index;
	}

	function isInDeletepart(curTime) {
	    var _index = -1;

	    for (var i = 0; i < _videoclipInit.deleteFragments.length; i++) {
	        if (curTime >= _videoclipInit.deleteFragments[i].st && curTime <= _videoclipInit.deleteFragments[i].et) {
	            _index = i;
	            break;
	        }
	    }

	    return _index;
	}

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.historyArr = exports.deleteFragments = exports.clipFragments = exports.player = exports.videoPlay = undefined;

	var _common = __webpack_require__(2);

	var videoPlay = videojs('J_preview-video');

	var clipFragments = void 0;

	var deleteFragments = void 0;

	var historyArr = void 0;

	if (localStorage.getItem('history')) {
	    var his = JSON.parse(localStorage.getItem('history')).history;
	}

	if (false) {
	    exports.clipFragments = clipFragments = his[his.length - 1].cg;
	    exports.deleteFragments = deleteFragments = his[his.length - 1].dg;
	    exports.historyArr = historyArr = his;
	} else {
	    exports.clipFragments = clipFragments = [{
	        st: 0,
	        et: 785,
	        spt: 785,
	        over: 0,
	        img: './src/images/default.png'
	    }];

	    exports.deleteFragments = deleteFragments = [];

	    exports.historyArr = historyArr = [{
	        cg: [{
	            st: 0,
	            et: 785,
	            spt: 785,
	            over: 0,
	            img: './src/images/default.png'
	        }],
	        dg: []
	    }];
	}

	var app = new Vue({
	    el: '#J_editor-timeline',
	    data: {
	        clipFragments: clipFragments
	    },
	    filters: {
	        toPreTime: _common.toPreTime
	    }
	});

	var player = {
	    get currentTime() {
	        return this;
	    },
	    set currentTime(ct) {
	        alert(ct);
	    }
	};

	exports.videoPlay = videoPlay;
	exports.player = player;
	exports.clipFragments = clipFragments;
	exports.deleteFragments = deleteFragments;
	exports.historyArr = historyArr;

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.saveHistory = exports.vjsHistoryPart = exports.toRealTime = exports.getAbsLeft = exports.beforeElement = exports.appendElement = exports.toInt = exports.toSedTime = exports.toPreTime = undefined;

	var _videoclipInit = __webpack_require__(1);

	/**
	 * @param { Number | String } sT
	 * @returns {String}
	 */
	function toPreTime(sT) {
	    var sedTime = typeof sT == 'number' ? sT : parseFloat(sT);

	    if (!Number.isInteger(sedTime)) {
	        throw new Error('toPreTime error: sedTime is ' + sT);
	    }

	    function supple(val) {
	        val = '' + val;

	        if (val.length === 1) {
	            val = '0' + val;
	        }

	        return val;
	    }

	    var hour = Math.trunc(sedTime / 3600);
	    var minute = Math.trunc((sedTime - hour * 3600) / 60);
	    var second = sedTime % 60;

	    if (hour == '00') {
	        return supple(minute) + ':' + supple(second);
	    }

	    return supple(hour) + ':' + supple(minute) + ':' + supple(second);
	}

	/**
	 * @param { String } pT
	 * @returns {Number}
	 */
	function toSedTime(pT) {
	    try {
	        var timePages = pT.split(':');
	        var timePagesLen = timePages.length;
	        var rel = 0;

	        if (timePagesLen <= 1 || timePagesLen > 3) throw new Error('toSedTime error: preTime is ' + pT);

	        var _iteratorNormalCompletion = true;
	        var _didIteratorError = false;
	        var _iteratorError = undefined;

	        try {
	            for (var _iterator = timePages.keys()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                var p = _step.value;

	                timePages[p] = toInt(timePages[p]);
	            }
	        } catch (err) {
	            _didIteratorError = true;
	            _iteratorError = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion && _iterator.return) {
	                    _iterator.return();
	                }
	            } finally {
	                if (_didIteratorError) {
	                    throw _iteratorError;
	                }
	            }
	        }

	        if (timePagesLen === 3) {
	            rel += toInt(timePages[0] * 3600) + toInt(timePages[1] * 60) + toInt(timePages[2]);
	        } else if (timePagesLen === 2) {
	            rel += toInt(timePages[0] * 60) + toInt(timePages[1]);
	        }

	        return rel;
	    } catch (err) {
	        console.log(err);
	        throw new Error('toSedTime error: ' + err);
	    }
	}

	/**
	 * @param { Number | String } argumentForCoercion
	 * @returns {Number}
	 */
	function toInt(argumentForCoercion) {
	    var coercedNumber = +argumentForCoercion;
	    var value = 0;

	    if (coercedNumber !== 0 && isFinite(coercedNumber)) {
	        value = Math.trunc(coercedNumber);
	    }

	    return value;
	}

	/**
	 * @param target
	 * @param element
	 */
	function appendElement(target, element) {
	    var ele = element;

	    if (typeof ele == 'string') {
	        var chileNodes = getChildElements(element);
	        ele = document.createDocumentFragment();

	        var _iteratorNormalCompletion2 = true;
	        var _didIteratorError2 = false;
	        var _iteratorError2 = undefined;

	        try {
	            for (var _iterator2 = chileNodes[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                var childItem = _step2.value;

	                ele.appendChild(childItem);
	            }
	        } catch (err) {
	            _didIteratorError2 = true;
	            _iteratorError2 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                    _iterator2.return();
	                }
	            } finally {
	                if (_didIteratorError2) {
	                    throw _iteratorError2;
	                }
	            }
	        }
	    }

	    target.appendChild(ele);
	}

	/**
	 * @param target
	 * @param element
	 */
	function beforeElement(target, element) {
	    if (typeof element == 'string') {
	        var fg = document.createDocumentFragment();
	        var childNodes = getChildElements(element);

	        var _iteratorNormalCompletion3 = true;
	        var _didIteratorError3 = false;
	        var _iteratorError3 = undefined;

	        try {
	            for (var _iterator3 = childNodes[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {
	                var childItem = _step3.value;

	                fg.appendChild(childItem);
	            }
	        } catch (err) {
	            _didIteratorError3 = true;
	            _iteratorError3 = err;
	        } finally {
	            try {
	                if (!_iteratorNormalCompletion3 && _iterator3.return) {
	                    _iterator3.return();
	                }
	            } finally {
	                if (_didIteratorError3) {
	                    throw _iteratorError3;
	                }
	            }
	        }

	        target.parentNode.insertBefore(fg, target);
	    } else {
	        target.parentNode.insertBefore(element, target);
	    }
	}

	/**
	 * @param { Element } ele
	 * @returns { Array }
	 */
	function getChildElements(ele) {
	    var div = document.createElement('div');
	    div.innerHTML = ele;

	    return Array.from(div.childNodes);
	}

	/**
	 * @param { Element } obj
	 * @returns { Number | number }
	 */
	function getAbsLeft(obj) {
	    var l = obj.offsetLeft;

	    while (obj.offsetParent != null) {
	        obj = obj.offsetParent;
	        l += obj.offsetLeft;
	    }

	    return l;
	}

	/**
	 * @param { Number } ct
	 * @returns { Number }
	 */
	function toRealTime(ct) {
	    var _index = 0;

	    for (var i = 0; i < _videoclipInit.clipFragments.length; i++) {
	        if (ct > _videoclipInit.clipFragments[i].st && ct <= _videoclipInit.clipFragments[i].et) {
	            _index = i;
	            break;
	        }
	    }

	    return ct + _videoclipInit.clipFragments[_index].over;
	}

	/**
	 * @type {{addPart, removePart, getPart, getLength}}
	 */
	var vjsHistoryPart = function () {
	    return {
	        addPart: function addPart() {
	            _videoclipInit.historyArr.push(Object.assign({}, {
	                cg: JSON.parse(JSON.stringify(_videoclipInit.clipFragments)),
	                dg: JSON.parse(JSON.stringify(_videoclipInit.deleteFragments))
	            }));
	        },
	        removePart: function removePart() {
	            if (_videoclipInit.historyArr.length > 1) {
	                _videoclipInit.historyArr.pop();
	            }
	        },
	        getPart: function getPart() {
	            return _videoclipInit.historyArr.length == 1 ? _videoclipInit.historyArr[0] : _videoclipInit.historyArr[_videoclipInit.historyArr.length - 2];
	        },
	        getFirstPart: function getFirstPart() {
	            return _videoclipInit.historyArr[0];
	        },
	        getLength: function getLength() {
	            return _videoclipInit.historyArr.length;
	        }
	    };
	}();

	function saveHistory() {
	    var str = JSON.stringify(_videoclipInit.historyArr);

	    //localStorage.removeItem('history');

	    /*localStorage.setItem('history', JSON.stringify({
	        history: historyArr,
	    }));*/
	}

	exports.toPreTime = toPreTime;
	exports.toSedTime = toSedTime;
	exports.toInt = toInt;
	exports.appendElement = appendElement;
	exports.beforeElement = beforeElement;
	exports.getAbsLeft = getAbsLeft;
	exports.toRealTime = toRealTime;
	exports.vjsHistoryPart = vjsHistoryPart;
	exports.saveHistory = saveHistory;

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _common = __webpack_require__(2);

	var _videoclipInit = __webpack_require__(1);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var Timeline = function () {
	    function Timeline() {
	        _classCallCheck(this, Timeline);

	        this.playBox = document.getElementById('J_editor-handler-box');
	        this.playLine = document.getElementById('J_editor-playline');
	        this.playLineBar = document.getElementById('J_editor-playline-line');
	        this.playLineTime = document.getElementById('J_editor-playline-time');
	        this.clipBox = document.getElementById('J_editor-playline-clip');
	        this.playUlist = document.getElementById('J_editor-timeline');
	        this.playCurTime = document.getElementById('J_vjs-editor-curtime');
	        this.playAllTime = document.getElementById('J_vjs-editor-alltime');

	        this.moveFlag = false;
	        this._singleWidth = this.playBox.querySelector('li').offsetWidth;

	        this._init();
	    }

	    _createClass(Timeline, [{
	        key: 'setLocalTime',
	        value: function setLocalTime(lt) {
	            lt = (0, _common.toInt)(lt);

	            var self = this;

	            this.playCurTime.innerHTML = (0, _common.toPreTime)(lt);

	            getMoveLeft(lt);

	            function getMoveLeft(time) {
	                self._updatePlayTime(time);

	                var eq = 0;

	                for (var i = 0; i < _videoclipInit.clipFragments.length; i++) {
	                    if (_videoclipInit.clipFragments[i].et > time) {
	                        eq = i;
	                        break;
	                    }
	                }

	                var otherWidth = 0;
	                if (eq > 0) {
	                    otherWidth = self._singleWidth * eq;
	                    time = time - _videoclipInit.clipFragments[eq].st;
	                }

	                var maxWidth = self.playBox.querySelector('.editor-timeline').offsetWidth;

	                var moveLeft = parseFloat(time / _videoclipInit.clipFragments[eq].spt * self._singleWidth) + otherWidth;

	                if (moveLeft < 0) {
	                    moveLeft = 0;
	                } else if (moveLeft > maxWidth) {
	                    moveLeft = maxWidth;
	                }

	                self._playMoveLeft(moveLeft);
	            }
	        }
	    }, {
	        key: '_init',
	        value: function _init() {
	            this._bindEvent();
	        }
	    }, {
	        key: '_updatePlayTime',
	        value: function _updatePlayTime(sT) {
	            this.playLineTime.innerHTML = (0, _common.toPreTime)(sT);
	        }
	    }, {
	        key: '_bindEvent',
	        value: function _bindEvent() {
	            var _this = this;

	            this.clipBox.addEventListener('click', this._clipHandler.bind(this));
	            this.playBox.addEventListener('mousemove', this._moveEventHandler.bind(this));
	            this.playLineBar.addEventListener('mousedown', function () {
	                _this.moveFlag = true;_videoclipInit.videoPlay.pause();
	            });
	            document.querySelector('#J_editor-timeline').addEventListener('click', function (e) {
	                if (e.target.className == 'editor-detele-btn') {
	                    var index = e.target.dataset.index;

	                    _videoclipInit.deleteFragments.push({
	                        st: _videoclipInit.clipFragments[index].st + _videoclipInit.clipFragments[index].over,
	                        et: _videoclipInit.clipFragments[index].et + _videoclipInit.clipFragments[index].over
	                    });

	                    _videoclipInit.deleteFragments.sort(function (a, b) {
	                        return a.st - b.st;
	                    });

	                    _videoclipInit.clipFragments.forEach(function (item, _index) {
	                        if (_index > index) {
	                            item.over += _videoclipInit.clipFragments[index].spt;
	                            item.st -= _videoclipInit.clipFragments[index].spt;
	                            item.et -= _videoclipInit.clipFragments[index].spt;
	                        }
	                    });

	                    _videoclipInit.clipFragments.splice(index, 1);
	                    _this.playAllTime.innerHTML = (0, _common.toPreTime)(_videoclipInit.clipFragments[_videoclipInit.clipFragments.length - 1].et);

	                    _common.vjsHistoryPart.addPart();

	                    (0, _common.saveHistory)();
	                }
	            }, true);

	            document.addEventListener('mouseup', function () {
	                if (_this.moveFlag) {
	                    _this.moveFlag = false;

	                    _videoclipInit.videoPlay.currentTime((0, _common.toRealTime)(_this._getTimelineTime()));
	                    _videoclipInit.videoPlay.play();
	                }
	            });
	        }
	    }, {
	        key: '_getTimelineTime',
	        value: function _getTimelineTime() {
	            return (0, _common.toSedTime)(this.playLineTime.innerHTML);
	        }
	    }, {
	        key: '_moveEventHandler',
	        value: function _moveEventHandler(e) {
	            if (!this.moveFlag) return;

	            var maxWidth = this.playBox.querySelector('.editor-timeline').offsetWidth;
	            var moveLeft = e.pageX - getAbsLeft(this.playBox);

	            if (moveLeft < 0) {
	                moveLeft = 0;
	            } else if (moveLeft > maxWidth) {
	                moveLeft = maxWidth;
	            }

	            this._playMoveLeft(moveLeft);
	            this._playMoveTime(moveLeft);
	        }
	    }, {
	        key: '_playMoveLeft',
	        value: function _playMoveLeft(l) {
	            this.playLine.style.left = l + 'px';
	        }
	    }, {
	        key: '_playMoveTime',
	        value: function _playMoveTime(l) {
	            var scale = l / this._singleWidth;
	            var truncScale = Math.trunc(scale);
	            var eq = truncScale;

	            if (scale == truncScale) {
	                eq = scale - 1 < 0 ? 0 : scale - 1;
	            }

	            var datas = this.playUlist.querySelectorAll('li')[eq].dataset;
	            var curSt = (0, _common.toInt)(datas.st);
	            var curSpt = (0, _common.toInt)(datas.spt);

	            this._updatePlayTime((0, _common.toInt)((l - this._singleWidth * eq) / this._singleWidth * curSpt) + curSt);
	        }
	    }, {
	        key: '_clipHandler',
	        value: function _clipHandler() {
	            var _this2 = this;

	            if (_videoclipInit.clipFragments.length >= 6) {
	                alert('已经放不下了！');

	                return;
	            }

	            var curClipTime = this._getTimelineTime();

	            if (curClipTime == 0) return;

	            var curIndex = 0;

	            for (var i = 0; i < _videoclipInit.clipFragments.length; i++) {
	                if (_videoclipInit.clipFragments[i].et > curClipTime) {
	                    curIndex = i;
	                    break;
	                }
	                if (_videoclipInit.clipFragments[i].et == curClipTime) return;
	            }

	            var curClipFg = _videoclipInit.clipFragments.slice(curIndex, curIndex + 1)[0];

	            var _timer = setInterval(function () {
	                if (_videoclipInit.videoPlay.readyState() == 4) {

	                    var _img = _this2._getScreenImgSrc();

	                    _videoclipInit.clipFragments.splice(curIndex, 1, {
	                        st: curClipFg.st,
	                        et: curClipTime,
	                        spt: curClipTime - curClipFg.st,
	                        over: curClipFg.over,
	                        img: curClipFg.img
	                    }, {
	                        st: curClipTime,
	                        et: curClipFg.et,
	                        spt: curClipFg.et - curClipTime,
	                        over: curClipFg.over,
	                        img: _img
	                    });

	                    clearInterval(_timer);

	                    _common.vjsHistoryPart.addPart();

	                    (0, _common.saveHistory)();
	                }
	            }, 100);
	        }
	    }, {
	        key: '_getScreenImgSrc',
	        value: function _getScreenImgSrc() {
	            var canvas = document.createElement("canvas");
	            canvas.width = 1024;
	            canvas.height = 576;
	            canvas.getContext('2d').drawImage(document.getElementById('J_preview-video_html5_api'), 0, 0, canvas.width, canvas.height);
	            var img = document.createElement("img");
	            img.src = canvas.toDataURL();

	            return img.src;
	        }
	    }]);

	    return Timeline;
	}();

	function getAbsLeft(obj) {
	    var l = obj.offsetLeft;

	    while (obj.offsetParent != null) {
	        obj = obj.offsetParent;
	        l += obj.offsetLeft;
	    }

	    return l;
	}

	exports.default = Timeline;

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

	'use strict';

	Object.defineProperty(exports, "__esModule", {
	    value: true
	});

	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

	var _common = __webpack_require__(2);

	var _videoclipInit = __webpack_require__(1);

	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

	var PreviewBar = function () {
	    function PreviewBar() {
	        _classCallCheck(this, PreviewBar);

	        this.progress = document.getElementById('J_vjs-editor-progress');
	        this.presentBar = document.getElementById('J_vjs-progress-line');
	        this.moveIcon = document.getElementById('J_vjs-editor-moveicon');
	        this.timePlay = document.getElementById('J_vjs-editor-timeplay');
	        this.dragIcon = document.getElementById('J_vjs-progress-icon');

	        this.dragFlag = false;

	        this._init();
	    }

	    _createClass(PreviewBar, [{
	        key: 'setProgressBar',
	        value: function setProgressBar(time) {
	            this._setPresent(time / _videoclipInit.clipFragments[_videoclipInit.clipFragments.length - 1].et);
	        }
	    }, {
	        key: '_init',
	        value: function _init() {
	            this._bindEvent();
	        }
	    }, {
	        key: '_bindEvent',
	        value: function _bindEvent() {
	            var _this = this;

	            this.progress.addEventListener('mousemove', this._pressentBarMove.bind(this));
	            this.dragIcon.addEventListener('mousedown', function () {
	                _this.dragFlag = true;_videoclipInit.videoPlay.pause();
	            });
	            document.addEventListener('mouseup', function () {
	                if (_this.dragFlag) {
	                    _this.dragFlag = false;_videoclipInit.videoPlay.play();
	                }
	            });
	            this.progress.addEventListener('click', this._locatePreTime.bind(this));
	        }
	    }, {
	        key: '_locatePreTime',
	        value: function _locatePreTime() {
	            //debugger;
	            var _time = (0, _common.toRealTime)(this._getPresentTime());

	            _videoclipInit.videoPlay.currentTime(_time);
	        }
	    }, {
	        key: '_pressentBarMove',
	        value: function _pressentBarMove(e) {
	            var proMoveLeft = e.pageX - (0, _common.getAbsLeft)(this.progress);

	            this.moveIcon.style.left = proMoveLeft + 'px';

	            this._setPresentTime((0, _common.toInt)(proMoveLeft / 500 * _videoclipInit.clipFragments[_videoclipInit.clipFragments.length - 1].et));

	            var timePlayMove = proMoveLeft;

	            if (timePlayMove < 18) {
	                timePlayMove = 18;
	            } else if (timePlayMove > 500 - 18) {
	                timePlayMove = 500 - 18;
	            }

	            this.timePlay.style.left = timePlayMove + 'px';

	            if (this.dragFlag) {
	                this._setPresent(timePlayMove / 500);
	            }
	        }
	    }, {
	        key: '_setPresent',
	        value: function _setPresent(present) {
	            this.presentBar.style.width = present * 100 + '%';
	        }
	    }, {
	        key: '_setPresentTime',
	        value: function _setPresentTime(time) {
	            this.timePlay.innerHTML = (0, _common.toPreTime)(time);
	        }
	    }, {
	        key: '_getPresentTime',
	        value: function _getPresentTime() {
	            return (0, _common.toSedTime)(this.timePlay.innerHTML);
	        }
	    }]);

	    return PreviewBar;
	}();

	exports.default = PreviewBar;

/***/ })
/******/ ]);